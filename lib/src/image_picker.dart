library n_image_picker_view;

import 'dart:async';
import 'package:flutter/material.dart';
import 'image_controller.dart';
import 'image_body.dart';

class ImagePicker extends ImageBody{
  ImagePicker({
    required super.controller,
    super.onTap,
    super.onLoadingImage,
    super.width,
    super.height,
    super.filterOpacity,
    super.emptyWidget,
    super.filledWidget,
    super.onErrorWidget,
    super.onLoadingWidget,
    super.margin,
    super.bankgroundColor,
    super.borderRadius,
    super.border,
    super.shadow,
    super.readOnly,
    super.fit,
    super.viewerBlur,
    super.viewerBlurSigma,
    super.previewBlur,
    super.previewBlurSigma,
    super.shape,
    super.tag,
    super.duration,
    super.key
  });

  factory ImagePicker.square({
    required ImageController  controller,
    Future<void> Function() ? onTap,
    String                  ? onLoadingImage,
    double                  ? dimension,
    double                  ? filterOpacity,
    Widget                  ? emptyWidget,
    Widget                  ? filledWidget,
    Widget                  ? onErrorWidget,
    Widget                  ? onLoadingWidget,
    EdgeInsetsGeometry      ? margin,
    Color                   ? bankgroundColor,
    BorderRadius            ? borderRadius,
    Border                  ? border,
    BoxShadow               ? shadow,
    bool                    ? readOnly,
    BoxFit                  ? fit,
    bool                    ? viewerBlur,
    double                  ? viewerBlurSigma,
    bool                    ? previewBlur,
    double                  ? previewBlurSigma,
    Duration                ? duration,
    Object                  ? tag,
  }) => ImagePicker(
    controller        : controller,
    onTap             : onTap,
    onLoadingImage    : onLoadingImage,
    width             : dimension??100,
    height            : dimension??100,
    filterOpacity     : filterOpacity??0.2,
    emptyWidget       : emptyWidget,
    filledWidget      : filledWidget,
    onErrorWidget     : onErrorWidget,
    onLoadingWidget   : onLoadingWidget,
    margin            : margin,
    bankgroundColor   : bankgroundColor,
    borderRadius      : borderRadius,
    border            : border,
    shadow            : shadow,
    readOnly          : readOnly,
    fit               : fit??BoxFit.cover,
    viewerBlur        : viewerBlur,
    viewerBlurSigma   : viewerBlurSigma,
    previewBlur       : previewBlur,
    previewBlurSigma  : previewBlurSigma,
    shape             : BoxShape.rectangle,
    tag               : tag,
    duration          : duration??Duration(milliseconds: 250),
  );

  factory ImagePicker.circle({
    required ImageController  controller,
    Future<void> Function() ? onTap,
    String                  ? onLoadingImage,
    double                  ? dimension,
    double                  ? filterOpacity,
    Widget                  ? emptyWidget,
    Widget                  ? filledWidget,
    Widget                  ? onErrorWidget,
    Widget                  ? onLoadingWidget,
    EdgeInsetsGeometry      ? margin,
    Color                   ? bankgroundColor,
    Border                  ? border,
    BoxShadow               ? shadow,
    bool                    ? readOnly,
    BoxFit                  ? fit,
    bool                    ? viewerBlur,
    double                  ? viewerBlurSigma,
    bool                    ? previewBlur,
    double                  ? previewBlurSigma,
    Object                  ? tag,
    Duration                ? duration,
  }) => ImagePicker(
    controller        : controller,
    onTap             : onTap,
    onLoadingImage    : onLoadingImage,
    width             : dimension,
    height            : dimension,
    filterOpacity     : filterOpacity??0.2,
    emptyWidget       : emptyWidget,
    filledWidget      : filledWidget,
    onErrorWidget     : onErrorWidget,
    onLoadingWidget   : onLoadingWidget,
    margin            : margin,
    bankgroundColor   : bankgroundColor,
    border            : border,
    shadow            : shadow,
    readOnly          : readOnly,
    fit               : fit??BoxFit.cover,
    viewerBlur        : viewerBlur,
    viewerBlurSigma   : viewerBlurSigma,
    previewBlur       : previewBlur,
    previewBlurSigma  : previewBlurSigma,
    shape             : BoxShape.circle,
    tag               : tag,
    duration          : duration??Duration(milliseconds: 250),
  );

  factory ImagePicker.expand({
    required ImageController  controller,
    Future<void> Function() ? onTap,
    String                  ? onLoadingImage,
    double                  ? filterOpacity,
    Widget                  ? emptyWidget,
    Widget                  ? filledWidget,
    Widget                  ? onErrorWidget,
    Widget                  ? onLoadingWidget,
    EdgeInsetsGeometry      ? margin,
    Color                   ? bankgroundColor,
    BorderRadius            ? borderRadius,
    Border                  ? border,
    BoxShadow               ? shadow,
    bool                    ? readOnly,
    BoxFit                  ? fit,
    bool                    ? viewerBlur,
    double                  ? viewerBlurSigma,
    bool                    ? previewBlur,
    double                  ? previewBlurSigma,
    Object                  ? tag,
    Duration                ? duration,
  }) => ImagePicker(
    controller        : controller,
    onTap             : onTap,
    onLoadingImage    : onLoadingImage,
    width             : double.infinity,
    height            : double.infinity,
    filterOpacity     : filterOpacity??0.2,
    emptyWidget       : emptyWidget,
    filledWidget      : filledWidget,
    onErrorWidget     : onErrorWidget,
    onLoadingWidget   : onLoadingWidget,
    margin            : margin,
    bankgroundColor   : bankgroundColor,
    borderRadius      : borderRadius,
    border            : border,
    shadow            : shadow,
    readOnly          : readOnly,
    fit               : fit??BoxFit.cover,
    viewerBlur        : viewerBlur,
    viewerBlurSigma   : viewerBlurSigma,
    previewBlur       : previewBlur,
    previewBlurSigma  : previewBlurSigma,
    shape             : BoxShape.rectangle,
    tag               : tag,
    duration          : duration??Duration(milliseconds: 250),
  );
}